<?php
/**
 * ChargesApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Femsa
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Femsa API
 *
 * Femsa sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@Femsa.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Femsa\Test\Api;

use DigitalFemsa\Api\ChargesApi;
use DigitalFemsa\ApiException;
use DigitalFemsa\Configuration;
use DigitalFemsa\Model\ChargeRequest;
use DigitalFemsa\Model\ChargeUpdateRequest;
use PHPUnit\Framework\TestCase;

/**
 * ChargesApiTest Class Doc Comment
 *
 * @category Class
 * @package  Femsa
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ChargesApiTest extends TestCase
{

    protected static ChargesApi $apiInstance;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        $config = Configuration::getDefaultConfiguration()->setHost(BaseTest::$host);
        self::$apiInstance = new ChargesApi(null, $config);
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for getCharges
     *
     * Get A List of Charges.
     *
     * @throws ApiException
     */
    public function testGetCharges()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->getCharges($accept_language, null, 20);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for ordersCreateCharge
     *
     * Create charge.
     *
     * @throws ApiException
     */
    public function testOrdersCreateCharge()
    {
        $accept_language = 'es';
        $rq = new ChargeRequest([
            'payment_method' => [
                'type' => 'card',
                'token_id' => 'tok_test_visa_4242',
                'monthly_installments' => 3
            ]
        ]);
        $result = self::$apiInstance->ordersCreateCharge('ord_2uiGPHDV6Zzribeqy', $rq, $accept_language);
        $this->assertEquals("ord_2uiGPHDV6Zzribeqy", $result->getOrderId());
    }

    /**
     * @throws ApiException
     */
    public function testOrdersCreateChargeWithMonthlyInstallments()
    {
        $accept_language = 'es';
        $rq = new ChargeRequest([
            'amount' => 100
        ]);
        $result = self::$apiInstance->ordersCreateCharge('ord_2tUigJ8DgBhbp6w5D', $rq, $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * @throws ApiException
     */
    public function testOrdersUpdateCharge(){
        $accept_language = 'es';
        $request = new ChargeUpdateRequest([
            'reference_id' => "762346234"
        ]);
        $result = self::$apiInstance->updateCharge('6524722f28c7ba0016a5b17d', $request, $accept_language);

        $this->assertEquals("6524722f28c7ba0016a5b17d", $result->getId());
        $this->assertEquals($request->getReferenceId(), $result->getReferenceId());
    }
}
